name: Build and Release

# Every time a new tag with the typical assembly format is pushed this will run. e.g. tag name "1.0.0.0"
on:
  workflow_dispatch:

env:
  # Adjust this to your plugin title
  PLUGIN_NAME: "NINA.Photon.Plugin.ASA"


jobs:
  build-and-release:
    runs-on: windows-latest
    permissions: write-all 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # In case you need more sub folders add these here
      - name: Prepare folders
        run: |
          mkdir packages
          mkdir packages/${{ env.PLUGIN_NAME }}

      - name: Get Assembly Version
        id: get_version
        run: |
          $version = (Select-String -Path "NINA.Photon.Plugin.ASA\Properties/AssemblyInfo.cs" -Pattern 'AssemblyVersion\("([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)"\)').Matches.Groups[1].Value
          echo "version=$version" >> $env:GITHUB_OUTPUT

      # This will build your solution. If the solution name differs from your plugin name, please adjust it here
      - name: Build .NET Assemblies
        run: |
          dotnet restore
          dotnet build ${{ env.PLUGIN_NAME }}.sln -c Release -p:PostBuildEvent= -p:Version=${{ steps.get_version.outputs.version }}

      # If you have mkdocs documentation you want to include, you can uncomment and build it like this
      # - name: Build Documentation
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install mkdocs
      #     pip install mkdocs-material
      #     mkdocs build -f ${{ PLUGIN_NAME }}\docs\mkdocs.yml


      # Add all necessary files that the plugin needs to the packages folder - basically all items that are normally in your post build event on your local builds
      - name: Prepare package
        run: |
          Copy-Item "${{ env.PLUGIN_NAME }}/bin/Release/net8.0-windows/${{ env.PLUGIN_NAME }}.dll" "packages/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.dll" -Force
          Copy-Item "${{ env.PLUGIN_NAME }}/bin/Release/net8.0-windows/${{ env.PLUGIN_NAME }}.pdb" "packages/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.pdb" -Force
      
      - name: Create Plugin archives and manifests
        run: |
          curl -LO https://raw.githubusercontent.com/isbeorn/nina.plugin.manifests/refs/heads/main/tools/CreateManifest.ps1?raw=true
          pwsh CreateManifest.ps1 -file "packages/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.dll" -installerUrl "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.PLUGIN_NAME }}.${{ steps.get_version.outputs.version }}.zip" -createArchive -includeAll -appendVersionToArchive
          
          
      - name: List files for debugging
        run: |
            ls -R .

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.${{ steps.get_version.outputs.version }}.zip
            ./${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}/manifest.json
